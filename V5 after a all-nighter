//8, 12, 13 RGB.
//https://github.com/BretStateham/RGBLED

//My variables

#include <EEPROM.h>

#include <RGBLED.h>
RGBLED led(8, 12, 13, COMMON_CATHODE);
float delayspeed = 1010;//iralavent!!
int buttonSwitchCase; //will use eeprom!!
const int MaxButtonSwitchCase = 7;

//end my varables

const int CHANNELS = 6;
const int LIGHT_PINS[CHANNELS] = {3, 5, 6, 9, 10, 11};
const int LED_PINS[CHANNELS] = {8, 12, 13};


float MIN_BRIGHTNESS[CHANNELS] = {0, 0, 0, 0, 0, 0};
float MAX_BRIGHTNESS[CHANNELS] = {100, 255, 100, 255, 100, 255};
float CurrentBrightness[CHANNELS] = {0, 0, 0, 0, 0, 0};
float FadeAmount[CHANNELS] = {1, 1, 1, 1, 1, 1};

//settings
// do not simplify or complain array rewrite
float case1Brightness[CHANNELS] = {1, 60, 120, 180, 240, 45};        //rotate
float case1FadeAmount[CHANNELS] = {1, 1, 1, 1, 1, 1};
float case1MIN_BRIGHTNESS[CHANNELS] = {0, 0, 0, 0, 0, 0};
float case1MAX_BRIGHTNESS[CHANNELS] = {255, 255, 255, 255, 255, 255};

float case2Brightness[CHANNELS] = {101, 130, 150, 170, 195, 240};    //bright rotate
float case2FadeAmount[CHANNELS] = {1, 1, 1, 1, 1, 1};
float case2MIN_BRIGHTNESS[CHANNELS] = {130, 130, 130, 130, 130, 130};
float case2MAX_BRIGHTNESS[CHANNELS] = {255, 255, 255, 255, 255, 255};

float case3Brightness[CHANNELS] = {0, 10, 20, 30, 40, 50};           //deep flicker
float case3FadeAmount[CHANNELS] = {.3, .2, .1, .6, .5, .4};
float case3MIN_BRIGHTNESS[CHANNELS] = {0, 0, 0, 0, 0, 0};
float case3MAX_BRIGHTNESS[CHANNELS] = {255, 255, 255, 255, 255, 255};

float case4Brightness[CHANNELS] = {140, 110, 90, 66, 150, 99};        //bright flicker
float case4FadeAmount[CHANNELS] = {3, 2, 5, 2, 5, 4};
float case4MIN_BRIGHTNESS[CHANNELS] = {80, 60, 80, 60, 60, 80};
float case4MAX_BRIGHTNESS[CHANNELS] = {255, 255, 255, 255, 255, 255};

float case5Brightness[CHANNELS] = {0, 0, 170, 170, 250, 250};                 //smooth shadows
float case5FadeAmount[CHANNELS] = {.2, .2, .2,.2, .2, .2};
float case5MIN_BRIGHTNESS[CHANNELS] = {0, 0, 0, 0, 0, 0};
float case5MAX_BRIGHTNESS[CHANNELS] = {255, 255, 255, 255, 255, 255};

float case6Brightness[CHANNELS] = {255, 255, 255, 255, 255, 255}; // all on
float case6FadeAmount[CHANNELS] = {0, 0, 0, 0, 0, 0};
float case6MIN_BRIGHTNESS[CHANNELS] = {255, 255, 255, 255, 255, 255};
float case6MAX_BRIGHTNESS[CHANNELS] = {255, 255, 255, 255, 255, 255};

float case7Brightness[CHANNELS] = {0, 0, 0, 0, 0, 0};            // all off
float case7FadeAmount[CHANNELS] = {0, 0, 0, 0, 0, 0};
float case7MIN_BRIGHTNESS[CHANNELS] = {0, 0, 0, 0, 0, 0};
float case7MAX_BRIGHTNESS[CHANNELS] = {0, 0, 0, 0, 0, 0};

bool over20sec = 0;

float lastPos = 0;
// a global variables to hold the last position
float newPos = 0;
//BOTH irellavebt will be overwritted at encoder get

float encoderInit = 12;//sets init speed!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
unsigned long delaySpeedProcessed = 0;
unsigned long time_now = 0;

//handel rotory start
#include <Arduino.h>
#include <RotaryEncoder.h>

#if defined(ARDUINO_AVR_UNO) || defined(ARDUINO_AVR_NANO_EVERY)
// Example for Arduino UNO with input signals on pin 2 and 3
#define PIN_IN1 4
#define PIN_IN2 2

#endif

// Setup a RotaryEncoder with 4 steps per latch for the 2 signal input pins:
// RotaryEncoder encoder(PIN_IN1, PIN_IN2, RotaryEncoder::LatchMode::FOUR3);

// Setup a RotaryEncoder with 2 steps per latch for the 2 signal input pins:
RotaryEncoder encoder(PIN_IN1, PIN_IN2, RotaryEncoder::LatchMode::TWO03);

// Define some constants.

// the maximum acceleration is 10 times.
constexpr float m = 10;

// at 200ms or slower, there should be no acceleration. (factor 1)
constexpr float longCutoff = 30;

// at 5 ms, we want to have maximum acceleration (factor m)
constexpr float shortCutoff = 3;

// To derive the calc. constants, compute as follows:
// On an x(ms) - y(factor) plane resolve a linear formular factor(ms) = a * ms + b;
// where f(4)=10 and f(200)=1

constexpr float a = (m - 1) / (shortCutoff - longCutoff);
constexpr float b = 1 - longCutoff * a;



//handel rotory end


//Handle button
// constants won't change. They're used here to set pin numbers:

#include <ezButton.h>

ezButton button(7);  // create ezButton object that attach to pin 7;

//end button


// the setup routine runs once when you press reset:
void setup() {

  TCCR1B = TCCR1B & B11111000 | B00000001; // set timer 1 divisor to 1 for PWM frequency of 31372.55 Hz
  TCCR0B = TCCR0B & B11111000 | B00000001; // for PWM frequency of 62500.00 Hz
  TCCR2B = TCCR2B & B11111000 | B00000001; // for PWM frequency of 31372.55 Hz

  //Serial.println("Setup first line");

  button.setDebounceTime(20); // set debounce time to 50 milliseconds

  for (int i = 0; i < CHANNELS; i++) {
    pinMode(LIGHT_PINS[i], OUTPUT);
  }
  for (int i = 0; i < 3; i++) {
    pinMode(LED_PINS[i], OUTPUT);
  }

  pinMode(2, INPUT_PULLUP);
  pinMode(3, INPUT_PULLUP);
  pinMode(7, INPUT_PULLUP); //button


  //rotory encoder
  Serial.begin(115200);
  while (!Serial);

  Serial.println("AcceleratedRotator example for the RotaryEncoder library.");
  Serial.print("a=");
  Serial.println(a);
  Serial.print("b=");
  Serial.println(b);

  encoder.setPosition(encoderInit);



  //button
  pinMode(7, INPUT_PULLUP);

  //****************************************this will wear out to cheap ass arduino that cant die a better death anyway. Estimated 1million / 50 times a day = too many days to be alive
  //EEPROM.write(address, value)
  buttonSwitchCase = float(EEPROM.read(0));

  if (buttonSwitchCase > MaxButtonSwitchCase)  {    //not >=
    buttonSwitchCase = 0;
    Serial.print("EEPROM overflow resetting to 0");
  }
  else {
    Serial.print("EEPROM Not over 6");
  }

  EEPROM.update(0, (buttonSwitchCase + 1)); //this allows power cycle to increment for headless implementation
  // do not ever use write, in case messing up
  Serial.println("");
  Serial.print("EEPROM address 0 = ");
  Serial.println(buttonSwitchCase);
  Serial.println("");
  //plant the eepromm setted settings before any button actions
  Serial.println("Setting buttonSwitchCase == eeprom");
  updateLightSettings(buttonSwitchCase);
}



// the loop routine runs over and over again forever:
void loop() {

  //Serial.println("Loop first line");
  button.loop(); // MUST call the loop() function first
  //
  //  //  setting of each buttonSwitchCase start
  //  switch (buttonSwitchCase) {
  //
  //    default:
  //      break;
  //  }

  //button


  if (button.isPressed()) {
    buttonSwitchCase++;
    Serial.print("buttonSwitchCase Var==");
    Serial.print(buttonSwitchCase);
    Serial.println("     The button is pressed");
    updateLightSettings(buttonSwitchCase);
  }

  if (button.isReleased()) {
    Serial.print("buttonSwitchCase Var==");
    Serial.print(buttonSwitchCase);
    Serial.println("     The button is released");
    if (buttonSwitchCase >= MaxButtonSwitchCase) {
      buttonSwitchCase = 0;
    }
  }
  //button end


  if (millis() >= time_now + delaySpeedProcessed) {
    time_now += delaySpeedProcessed;
    //Serial.println("Hello, doing low frequency funcs");

    //display the values on halogen
    for (int i = 0; i < CHANNELS; i++) { // this for loop block updates halogens

      analogWrite(LIGHT_PINS[i], (int)(CurrentBrightness[i]));
      CurrentBrightness[i] += FadeAmount[i];

      // reverse the direction of the fading at the ends of the fade:
      if (CurrentBrightness[i] <= MIN_BRIGHTNESS[i] ||
          CurrentBrightness[i] >= MAX_BRIGHTNESS[i]) {
        FadeAmount[i] = -FadeAmount[i];
      }
    }




  }



  //enoder
  encoder.tick();
  float newPos = encoder.getPosition();
  //  if (newPos < 0) {
  //    encoder.setPosition(10);
  //  } currently no solution
  if (lastPos != newPos) {
    // accelerate when there was a previous rotation in the same direction.
    unsigned long ms = encoder.getMillisBetweenRotations();
    if (ms < longCutoff) {
      // do some acceleration using factors a and b
      // limit to maximum acceleration
      if (ms < shortCutoff) {
        ms = shortCutoff;
      }
      float ticksActual_float = a * ms + b;
      Serial.print(" f= ");
      Serial.println(ticksActual_float);
      long deltaTicks = (long)ticksActual_float * (newPos - lastPos);
      Serial.print(" d= ");
      Serial.println(deltaTicks);
      newPos = newPos + deltaTicks;
      encoder.setPosition(newPos);
    }
    Serial.print(" newPos: ");
    Serial.println(newPos);
    //    Serial.print(" ms: ");
    //    Serial.println(ms);
    lastPos = newPos;

    delayspeed = newPos; //YESSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS4

    if (delayspeed < 100) {
      delaySpeedProcessed = delayspeed;
    }
    else if (delayspeed < 2000) {//very rechable.
      delaySpeedProcessed = delayspeed+pow((delayspeed-100),1.2);
    }
    else {
      delaySpeedProcessed = 0;//too far
    }
    Serial.println(delaySpeedProcessed);
  } // if

  //delay(delaySpeedProcessed); // do not process this val as its printed
  // can not use any delay because it blocks encoder
  /*

     Notes and Warnings
    This function works very accurately in the range 3 microseconds and up to 16383.
    We cannot assure that delayMicroseconds will perform precisely for smaller delay-times.
    Larger delay times may actually delay for an extremely brief time.


  */

  if (millis() > 2000000 && over20sec == 0) {
    Serial.println("run for over 20 seconds, eeprom - 1 back to initial pwr on state");//idk why but 2000 000 is 20 sec.ss
    EEPROM.update(0, 5); //jump to state 5 for smoooooth
    over20sec = 1;
  }

}


void updateLightSettings(int buttonSwitchCase) { //in function name = out of function name = buttonSwitchCase
  if (buttonSwitchCase == 1) {
    Serial.println("Setting buttonSwitchCase == 1......");
    led.writeRGB(0, 0, 255);
    for (int i = 0; i < CHANNELS; i++)
    {
      CurrentBrightness[i] = case1Brightness[i];
      FadeAmount[i] = case1FadeAmount[i];
      MIN_BRIGHTNESS[i] = case1MIN_BRIGHTNESS[i];
      MAX_BRIGHTNESS[i] = case1MAX_BRIGHTNESS[i];
      Serial.println(CurrentBrightness[i]);
    }
  }
  else if (buttonSwitchCase == 2) {
    Serial.println("Setting buttonSwitchCase == 2......");
    led.writeRGB(255, 0, 0);
    for (int i = 0; i < CHANNELS; i++)
    {
      CurrentBrightness[i] = case2Brightness[i];
      FadeAmount[i] = case2FadeAmount[i];
      MIN_BRIGHTNESS[i] = case2MIN_BRIGHTNESS[i];
      MAX_BRIGHTNESS[i] = case2MAX_BRIGHTNESS[i];
      Serial.println(CurrentBrightness[i]);
    }
  }
  else if (buttonSwitchCase == 3) {
    Serial.println("Setting buttonSwitchCase == 3......");
    led.writeRGB(0, 255, 0);
    for (int i = 0; i < CHANNELS; i++)
    {
      CurrentBrightness[i] = case3Brightness[i];
      FadeAmount[i] = case3FadeAmount[i];
      MIN_BRIGHTNESS[i] = case3MIN_BRIGHTNESS[i];
      MAX_BRIGHTNESS[i] = case3MAX_BRIGHTNESS[i];
      Serial.println(CurrentBrightness[i]);
    }
  }
  else if (buttonSwitchCase == 4) {
    Serial.println("Setting buttonSwitchCase == 4......");
    led.writeRGB(255, 0, 255);
    for (int i = 0; i < CHANNELS; i++)
    {
      CurrentBrightness[i] = case4Brightness[i];
      FadeAmount[i] = case4FadeAmount[i];
      MIN_BRIGHTNESS[i] = case4MIN_BRIGHTNESS[i];
      MAX_BRIGHTNESS[i] = case4MAX_BRIGHTNESS[i];
      Serial.println(CurrentBrightness[i]);
    }
  }
  else if (buttonSwitchCase == 5) {
    led.writeRGB(255, 255, 0);
    Serial.println("Setting buttonSwitchCase == 5......");
    for (int i = 0; i < CHANNELS; i++)
    {
      CurrentBrightness[i] = case5Brightness[i];
      FadeAmount[i] = case5FadeAmount[i];
      MIN_BRIGHTNESS[i] = case5MIN_BRIGHTNESS[i];
      MAX_BRIGHTNESS[i] = case5MAX_BRIGHTNESS[i];
      Serial.println(CurrentBrightness[i]);
    }
  }
  else if (buttonSwitchCase == 6) {
    led.writeRGB(0, 255, 255);
    Serial.println("Setting buttonSwitchCase == 6......");
    for (int i = 0; i < CHANNELS; i++)
    {
      CurrentBrightness[i] = case6Brightness[i];
      FadeAmount[i] = case6FadeAmount[i];
      MIN_BRIGHTNESS[i] = case6MIN_BRIGHTNESS[i];
      MAX_BRIGHTNESS[i] = case6MAX_BRIGHTNESS[i];
      Serial.println(CurrentBrightness[i]);
    }
  }
  else if (buttonSwitchCase == 7) {
    led.writeRGB(0, 0, 0);
    Serial.println("Setting buttonSwitchCase == 7......");
    for (int i = 0; i < CHANNELS; i++)
    {
      CurrentBrightness[i] = case7Brightness[i];
      FadeAmount[i] = case7FadeAmount[i];
      MIN_BRIGHTNESS[i] = case7MIN_BRIGHTNESS[i];
      MAX_BRIGHTNESS[i] = case7MAX_BRIGHTNESS[i];
      Serial.println(CurrentBrightness[i]);
    }
  }
}


